<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ output extension=".cs"#>
<#
CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);
string inputFile = @"..\DotNet.T4Model\\T4Model.edmx";

EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

#>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNet.IDAL;
using System.Reflection;

namespace DotNet.DBProvide
{
    public partial class DalFactory
	{
		 //抽象工厂
        private static readonly string AssemblyName = "";

        static DalFactory()
        {
            AssemblyName = System.Configuration.ConfigurationManager.AppSettings["AssemblyName"];
        } 
   
<#
// Emit Entity Types

foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
    //fileManager.StartNewFile("I"+entity.Name + "Dal.cs");
    //BeginNamespace(namespaceName, code);    
#>			
	public static I<#=entity.Name#>Dal Get<#=entity.Name#>Dal()
        {
            //抽象工厂模式——利用反射
            object obj = Assembly.Load(AssemblyName).CreateInstance(AssemblyName + ".<#=entity.Name#>Dal", true);
            return obj as I<#=entity.Name#>Dal;
            //没用缓存
        }
	 
<#}#>	 
	}
}